#!/usr/bin/perl
use v5.16;
use FindBin qw($Bin $RealBin $RealScript); use lib "$Bin/../lib";


#settings according to the example in README.md
my $server = {
	user	=> "someuser",
	ip	=> "1.2.3.4",
	card	=> "eths",
	sshport	=> 22789,
	dns	=> [ "5.6.7.8", "9.10.11.12" ]
};
my $client = {
	ip	=> "13.14.15.16",
	card	=> "ethc",
	gateway	=> "13.14.0.254",
	subnets	=> [ "13.14.0.0/16", "15.16.17.0/24" ],
	dns	=> [ "15.16.17.1", "15.16.17.2"]
};


#default settings of other things
my $onserver = undef;	#defined when running on the server


#Prints errorstring passed as argument and exit with returncode 1
#If the string starts with a number, use this code instead and also mention the code in the output
sub error {
	my $error = shift;
	my $errorcode = 1; my $errorstring = $error;
	if($error=~/^(\d+)\s+(.*)/) { $errorcode = $1; $errorstring = $2 };
	print STDERR "error";
	unless($errorcode == 1) { print STDERR " (code $errorcode)"; }
	print STDERR ": $errorstring\n";
	exit $errorcode;
}

#use $PATH to find the location of a program passed as argument
sub searchlocation {
	my $program = shift;
	foreach(split /:/, $ENV{PATH} ) {
		my $test = "$_/$program";
		if(-f $test and -x $test) { return $test; }
	}
	return undef;
}

#Restart the program as root if you are not root yet
sub runasroot {
	unless($< == 0) {
		say STDERR "You need to be root to run this script. I'll change the user for you.";
		my $sudo = searchlocation "sudo";
		if(not defined $sudo) { error "'sudo' is not available. you'll have to find another way to become root and run this script."; }
		exec($sudo, "$RealBin/$RealScript", @ARGV);
	}
}

sub changesettings {
	foreach(@ARGV) {
		if(/^server$/i) { $onserver = 1; }
	}
}


runasroot;


#Change the settings to the defaults, the ones we can discover and the ones that are specified
delete $server->{user};	#default: assume the username on the server is the same as on the client
delete $server->{sshport}; #default: assume the server listens on the default ssh port
changesettings;


my $ssh = searchlocation "ssh"; unless(defined $ssh) { error "'ssh' is not installed, on debian-based systems you can install it with 'apt-get install ssh'"; }
my $screen = searchlocation "screen"; unless(defined $screen) { error "'screen' is not installed, on debian-based systems you can install it with 'apt-get install screen'"; }
my $socat = searchlocation "socat"; unless(defined $socat) { error "'socat' is not installed, on debian-based systems you can install it with 'apt-get install socat'"; }
if(defined $onserver) {
	my $iptables = searchlocation "iptables"; unless(defined $iptables) { error "'iptables' is not installed, on debian-based systems you can install it with 'apt-get install iptables'"; }
} else {
	my $route = searchlocation "route"; unless(defined $route) { error "'route' is not installed, on debian-based systems you can install it with 'apt-get install net-tools'"; }
}


#BEGIN DEBUG
use Data::Dumper;
say Dumper($server);
say Dumper($client);
error "4 Example error";
