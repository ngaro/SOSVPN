#!/usr/bin/perl
use v5.16; use warnings; use strict;
use FindBin qw($Bin $RealBin $RealScript); use lib "$Bin/../lib";


### Settings according to the example in README.md ###
#( You don't want use these but you can leave them here for documentational purposes, they are overwritten in the next step)
my $server = {
	user	=> "someuser",
	ip	=> "1.2.3.4",
	card	=> "eths",
	sshport	=> 22789,
	dns	=> [ "5.6.7.8", "9.10.11.12" ]
};
my $client = {
	ip	=> "13.14.15.16",
	card	=> "ethc",
	gateway	=> "13.14.0.254",
	subnets	=> [ "13.14.0.0/16", "15.16.17.0/24" ],
	dns	=> [ "15.16.17.1", "15.16.17.2"]
};


### Default settings ###
$server = {}; $client = {};	#cleanup example settings
$server->{sshport} = 22;	#default ssh port
$server->{dns} = [ "8.8.4.4", "8.8.8.8" ];	#google dnsservers, if the isp of the server blocks these, use the ones of your isp

#default settings of other things
my $onserver = undef;	#defined when running on the server
my $serversetup = undef;	#defined if we are still setting up the server


#Prints errorstring passed as argument and exit with returncode 1
#If the string starts with a number, use this code instead and also mention the code in the output
sub error {
	my $error = shift;
	my $errorcode = 1; my $errorstring = $error;
	if($error=~/^(\d+)\s+(.*)/) { $errorcode = $1; $errorstring = $2 };
	print STDERR "error";
	unless($errorcode == 1) { print STDERR " (code $errorcode)"; }
	print STDERR ": $errorstring\n";
	exit $errorcode;
}

#use $PATH to find the location of a program passed as argument
sub searchlocation {
	my $program = shift;
	foreach(split /:/, $ENV{PATH} ) {
		my $test = "$_/$program";
		if(-f $test and -x $test) { return $test; }
	}
	return undef;
}

#Restart the program as root if you are not root yet
sub runasroot {
	unless($< == 0) {
		say STDERR "You need to be root to run this script. I'll change the user for you.";
		my $sudo = searchlocation "sudo";
		if(not defined $sudo) { error "'sudo' is not available. you'll have to find another way to become root and run this script."; }
		exec($sudo, "$RealBin/$RealScript", @ARGV);
	}
}


### Main part of the program
runasroot();
foreach(@ARGV) {
	if(/^server$/i) { $onserver = 1; }	#the presence of the 'server' option determines if we are running on the server or on the client system
	if(/^serversetup$/i) { $onserver = 1; $serversetup = 1; }	#the presence of the 'serversetup' option determines if we are still setting up the server locally
}
#Check if all software is installed and search the locations
my $ssh = searchlocation "ssh"; unless(defined $ssh) { error "'ssh' is not installed, on debian-based systems you can install it with 'apt-get install ssh'"; }
my $screen = searchlocation "screen"; unless(defined $screen) { error "'screen' is not installed, on debian-based systems you can install it with 'apt-get install screen'"; }
my $socat = searchlocation "socat"; unless(defined $socat) { error "'socat' is not installed, on debian-based systems you can install it with 'apt-get install socat'"; }
my $iptables; my $systemctl; my $journalctl; my $route;
if(defined $onserver) {
	$iptables = searchlocation "iptables"; unless(defined $iptables) { error "'iptables' is not installed, on debian-based systems you can install it with 'apt-get install iptables'"; }
	$systemctl = searchlocation "systemctl"; unless(defined $systemctl) { error "systemd is not installed, on debian-based systems you can install it with 'apt-get install systemd'."; }
	$journalctl = searchlocation "journalctl";
} else {
	$route = searchlocation "route"; unless(defined $route) { error "'route' is not installed, on debian-based systems you can install it with 'apt-get install net-tools'"; }
}


### Subroutine definitions

#Restarts the ssh-server if it's not running, shows on which port it's running which users are you might login as and quits the program
sub checksshserver {
	my $running = undef; my $outputmessage = undef;
	foreach(split /\n/, `$systemctl status ssh`) { if(/^\s*active:\s*active\s*\(\s*running\s*\)/i) { $running = 1; } }	#check if ssh runs
	unless(defined $running) { system($systemctl, "start", "ssh"); sleep 5; }	#restart it when it's not running correctly
	foreach(split /\n/, `$systemctl status ssh`) { if(/^\s*active:\s*active\s*\(\s*running\s*\)/i) { $running = 1; } }	#check it again
	unless(defined $running) { error "Can't start ssh correctly"; }	#die if it still fails
	foreach(split /\n/, `$journalctl -u ssh`) { if(/server\s+listening\s+on\s+\S+\s+port\s+(\d+)/i) { $outputmessage = "The sshserver is listening on tcp/$1"; } }	#check the port
	say "$outputmessage\nAvailable 'regular' users, make sure you can login as one of them:";
	open(my $fh, "/etc/passwd");
	while(<$fh>) {
		/^(.+?):.+?:(\d+).*/; if($1 ne "nobody" and $2 >= 1000) { say "- $1"; }
	}
	close $fh;
	say "- root (will probably not work, most sshservers block root-logins)";
	exit;
}


if(defined $serversetup) { checksshserver; }	#Restarts the server if it's not running, shows some connection possibilities and quits the program


#BEGIN DEBUG
use Data::Dumper;
say Dumper($server);
say Dumper($client);
error "4 Example error";
